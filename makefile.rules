##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################
TESTDIR := ./tests/

ASTYLE := $(shell which astyle)
ifeq ($(ASTYLE),)
$(info command <astyle> not found! \
Install it to get advantage of automatic code formatting.\
After installation, run <make format> to format all the files to Kernighan & \
Ritchie (K&R) style code formatting.)
endif

##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := mcprof

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
# APP_ROOTS := simple1 simple2 fibonacci vectOps
APP_ROOTS := vectOps

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=


###### Place OS-specific definitions here ######
# Android
ifeq ($(TARGET_OS),android)
endif

# Linux
ifeq ($(TARGET_OS),linux)
	TOOL_CXXFLAGS+= -MD
# 	TOOL_CXXFLAGS=-Wall -Werror -Wno-unknown-pragmas -fno-stack-protector\
# 	-DTARGET_IA32E -DHOST_IA32E -fPIC -DTARGET_LINUX \
# 	-I/home/imran/pin-2.13-65163/source/include/pin \
# 	-I/home/imran/pin-2.13-65163/source/include/pin/gen \
# 	-I/home/imran/pin-2.13-65163/extras/components/include \
# 	-I/home/imran/pin-2.13-65163/extras/xed2-intel64/include \
# 	-I/home/imran/pin-2.13-65163/source/tools/InstLib \
# 	-O3 -fomit-frame-pointer -fno-strict-aliasing  \
# 	-MD -g -pg
# 	TOOL_LDFLAGS+= -pg
# 	TOOL_LIBS+= -pg
	APP_CXXFLAGS+= -fno-inline
endif

# Windows
ifeq ($(TARGET_OS),windows)
endif

##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test
mcprof.test: $(OBJDIR)vectOps$(EXE_SUFFIX) $(OBJDIR)vectOps$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)mcprof$(PINTOOL_SUFFIX) -- $(OBJDIR)vectOps$(EXE_SUFFIX)
# 	$(PIN) -t $(OBJDIR)mcprof$(PINTOOL_SUFFIX) -- $(OBJDIR)simple2$(EXE_SUFFIX)

##############################################################
#
# Build rules
#
##############################################################
# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

CPPSRCS = globals.cpp shadow.cpp commatrix.cpp pintrace.cpp mcprof.cpp
CPPOBJS = $(CPPSRCS:%.cpp=$(OBJDIR)%$(OBJ_SUFFIX))

$(OBJDIR)mcprof$(PINTOOL_SUFFIX): $(CPPOBJS)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

-include $(OBJDIR)*.d

clean: cleantemp
cleantemp:
	rm -f *~ $(TESTDIR)*~ communication.dot communication.pdf matrix.eps


format:
	astyle --style=kr *.h *.cpp
	rm -f *.orig

open:
	kate makefile.rules globals.h globals.cpp shadow.h shadow.cpp commatrix.h \
	commatrix.cpp pintrace.h pintrace.cpp mcprof.cpp &> /dev/null &

###### Special applications' build rules ######
$(OBJDIR)simple1$(EXE_SUFFIX): $(TESTDIR)simple1.c
	$(APP_CC) $(APP_CXXFLAGS) $(COMP_EXE)$@ $^ $(APP_LDFLAGS) $(APP_LIBS)

$(OBJDIR)simple2$(EXE_SUFFIX): $(TESTDIR)simple2.cpp
	$(APP_CXX) $(APP_CXXFLAGS) $(COMP_EXE)$@ $^ $(APP_LDFLAGS) $(APP_LIBS)

$(OBJDIR)vectOps$(EXE_SUFFIX): $(TESTDIR)vectOps.cpp
	$(APP_CXX) $(APP_CXXFLAGS) $(COMP_EXE)$@ $^ $(APP_LDFLAGS) $(APP_LIBS)
